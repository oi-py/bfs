from collections import * 
import random


def ShortestPathLen(graph,start,end):
    '''
    有向无权图中：从start到end的最短路长度
    '''
    if start == end: return 0
    Q = deque([(0,start)])
    vis = set([start])
    while Q:
        step,node = Q.popleft()
        step += 1
        for node2 in graph[node]:
            if node2 not in vis:
                vis.add(node2)
                if node2 == end:
                    return step
                Q.append((step,node2))
    return -1

def ShortestPathLen1D(graph,start,end,n):
    '''
    一维有向无权图中：从start到end的最短路长度
    '''
    if start == end: return 0
    Q = deque([(0,start)])
    vis = [False]*n
    vis[start] = True
    while Q:
        step,node = Q.popleft()
        step += 1
        for node2 in graph[node]:
            if not vis[node2]:
                vis[node2] = True
                if node2 == end:
                    return step
                Q.append((step,node2))
    return -1
    
def ShortestPathLen2D(graph,si,sj,ei,ej,n,m):
    '''
    二维有向无权图中：从s到e的最短路长度
    '''
    if si == ei and sj == ej: return 0
    Q = deque([(0,si,sj)])
    vis = [[False]*m for i in range(n)]
    vis[si][sj] = True
    while Q:
        step,nodei,nodej = Q.popleft()
        step += 1
        for node2i,node2j in graph[nodei,nodej]:
            if not vis[node2i][node2j]:
                vis[node2i][node2j] = True
                if node2i == ei and node2j == ej:
                    return step
                Q.append((step,node2i,node2j))
    return -1

def ShortestPath(graph,start,end):
    '''
    有向无权图中：从start到end的最短路
    '''
    if start == end: return [start]
    last = {}
    Q = deque([(0,start)])
    vis = set([start])
    ans = []
    while Q:
        step,node = Q.popleft()
        step += 1
        for node2 in graph[node]:
            if node2 not in vis:
                last[node2] = node
                vis.add(node2)
                if node2 == end:
                    ans.append(end)
                    while node2 in last:
                        ans.append(last[node2])
                        node2 = last[node2]
                    return ans[::-1]
                Q.append((step,node2))
    return ans[::-1]

def ShortestPathALL(graph,start):
    '''
    有向无权图中：从start到所有节点的最短路长度
    '''
    Q = deque([(0,start)])
    vis = set([start])
    ans = {start:0}
    while Q:
        step,node = Q.popleft()
        step += 1
        for node2 in graph[node]:
            if node2 not in vis:
                ans[node2] = step
                vis.add(node2)
                Q.append((step,node2))
    return ans

def ShortestPathFull(graph):
    '''
    有向无权图中：任意两个结点之间的最短路长度
    '''
    ans = {}
    for start in graph:
        dis = ShortestPathALL(graph,start)
        for end in dis:
            ans[start,end] = dis[end]
    return ans

def ShortestPath_random(graph,start,end):
    '''
    有向无权图中：从start到end的随机最短路
    '''
    if start == end: return [start]
    last = {}
    Q = deque([(0,start)])
    vis = set([start])
    ans = []
    while Q:
        step,node = Q.popleft()
        step += 1
        random.shuffle(graph[node])
        for node2 in graph[node]:
            if node2 not in vis:
                last[node2] = node
                vis.add(node2)
                if node2 == end:
                    ans.append(end)
                    while node2 in last:
                        ans.append(last[node2])
                        node2 = last[node2]
                    return ans[::-1]
                Q.append((step,node2))
    return ans[::-1]

def ShortestPathLenF(graph,start,end):
    '''
    有向无权函数图中：从start到end的最短路长度
    '''
    if start == end: return 0
    Q = deque([(0,start)])
    vis = set([start])
    while Q:
        step,node = Q.popleft()
        step += 1
        for node2 in graph(node):
            if node2 not in vis:
                vis.add(node2)
                if node2 == end:
                    return step
                Q.append((step,node2))
    return -1
    
def ShortestPathF(graph,start,end):
    '''
    有向无权函数图中：从start到end的最短路
    '''
    if start == end: return [start]
    last = {}
    Q = deque([(0,start)])
    vis = set([start])
    ans = []
    while Q:
        step,node = Q.popleft()
        step += 1
        for node2 in graph(node):
            if node2 not in vis:
                last[node2] = node
                vis.add(node2)
                if node2 == end:
                    ans.append(end)
                    while node2 in last:
                        ans.append(last[node2])
                        node2 = last[node2]
                    return ans[::-1]
                Q.append((step,node2))
    return ans[::-1]

def ShortestPathALLF(graph,start):
    '''
    有向无权函数图中：从start到所有节点的最短路长度
    '''
    Q = deque([(0,start)])
    vis = set([start])
    ans = {start:0}
    while Q:
        step,node = Q.popleft()
        step += 1
        for node2 in graph(node):
            if node2 not in vis:
                ans[node2] = step
                vis.add(node2)
                Q.append((step,node2))
    return ans
